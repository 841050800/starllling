#我的数据大部分是股票数据，因此以股票为例

import pandas as pd
import Get_data
import time
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
import sklearn
from sklearn.model_selection import train_test_split
import numpy as np
import tushare as ts
import itertools

# 在想要不要搞个Strategy父类
# class Strategy:
#     def __init__(self):
#         pass

'''
我理解的Pair_Trading
不应该只是局限于2个品种之间进行对冲的含义
其含义其实相当于构建一个波动相对稳定的组合，在波动极端的情况下进行交易
2个品种是最基本的模式，但是可以存在如，-1a+2b-1c的组合。或者-1a+3b-2c之类的组合。
我这里做股票同行业内的Pair_Trading，如果按照industry初始，则只筛选industy里做pair最好的两个股票，这将非常耗时，
如果按照stockcode初始化，则将其内的stockcode互相组合。
'''

now = today=time.strftime('%Y-%m-%d',time.localtime(time.time()))


'''
提供一些功能：
1.自己输入股票池，根据股票池内构建组合
2.输入行业，行业内两两配对，循环得出每个组合的结果
3.提供是否要考虑样本内和样本外的参数

欠缺的功能
1.如何计算成本（特别是融资融券的成本），如果是期货，可能这个考虑就少很多，直接可以做空的话，等于直接以手续费做组合。
2.行业内判断标准，还不能直接给出最佳的两个组合
'''
class Pair_Trading:
    def __init__(self,industry=None,stockcode=[],start='1991-01-01',end=now,ifsplit=False):
        #提供两种初始化方法，一种是按照industry进行Pari_Trading,另一种则是按照stockcode
        self.industry = industry
        self.stockcode = stockcode
        self.start = start
        self.end = end
        self.ifsplit = ifsplit    #全样本分析，还是分train,test

    def Bystockcode(self):
        if self.ifsplit == False:  #全样本分析
            data_all = pd.DataFrame()
            #先得到合并的数据集，计算两者收盘价的相关性
            for code in self.stockcode:
                data = Get_data.get_k_data(code,self.start,self.end)
                close = pd.Series(data['close'],name=code)
                data_all = pd.concat([data_all,close],axis=1)
            corr = data_all.corr()
            print('相关系数矩阵如下',corr)

            #然后以第一列的收盘价为y，做多元线性回归,得到组合系数
            y = data_all.iloc[:,0]
            X = data_all.iloc[:,1:]
            reg = LinearRegression()
            reg.fit(X,y)
            coef = reg.coef_

            #利用系数组合出组合的收益port_price
            # y - XB = reg.inter_
            a = X * coef
            b = a.sum(axis=1)
            port_price = y - b

            #画图描述下这个价格波动
            print('组合价格波动如下图所示: \n')
            plt.figure(figsize=(12,8))
            plt.axhline(reg.intercept_)
            plt.plot(port_price)
            plt.grid(True)
            plt.title('port_price')
            plt.show()

            #止损止盈条件暂不设置
            #假设我们在port_price属于20%分位时买进，80%分位时候卖出
            buy_price = port_price.quantile(0.2)
            sell_price = port_price.quantile(0.8)
            position1 = np.where(port_price<buy_price,1,np.nan)
            position2 = np.where(port_price>sell_price,-1,position1)
            position = pd.Series(position2, name='position')
            position.fillna(method='ffill',inplace=True)

            position.plot(ylim=[-1.1,1.1],figsize=(12,8))
            plt.title('position')
            plt.show()

            port_price = pd.Series(port_price,name='port_price')
            data_return = pd.concat([port_price,position],axis=1)
            data_return['price_diff'] = data_return['port_price'].diff()
            data_return['str_price'] = data_return['price_diff'] * data_return['position'] * 1
            price = data_return['str_price'].cumsum()
            return price

        if self.ifsplit == True:
            data_all = pd.DataFrame()
            # 先得到合并的数据集，计算两者收盘价的相关性
            for code in self.stockcode:
                data = Get_data.get_k_data(code, self.start, self.end)
                close = pd.Series(data['close'], name=code)
                data_all = pd.concat([data_all, close], axis=1)

            length = data_all.shape[0]
            train_size = 0.66
            temp = int(length * train_size)
            X_train = data_all.iloc[:temp, 1:]
            X_test = data_all.iloc[temp:,1:]
            y_train = data_all.iloc[:temp, 0]
            y_test = data_all.iloc[temp:,0]

            train_all = pd.concat([X_train,y_train],axis=1)
            corr = train_all.corr()
            print('训练集相关系数矩阵如下 \n', corr)

            # 然后以第一列的收盘价为y，做多元线性回归,得到组合系数
            reg = LinearRegression()
            reg.fit(X_train, y_train)
            coef = reg.coef_

            # 利用系数组合出组合的收益port_price
            # y - XB = reg.inter_
            a = X_train * coef
            b = a.sum(axis=1)
            train_port_price = y_train - b

            c = X_test * coef
            d = c.sum(axis=1)
            test_port_price = y_test - d

            # 画图描述下这个价格波动
            print('训练集组合价格波动如下图所示: \n')
            plt.figure(figsize=(12, 8))
            plt.axhline(train_port_price.mean())
            plt.plot(train_port_price)
            plt.grid(True)
            plt.title('port_price')
            plt.show()

            print('训练集组合价格波动如下图所示: \n')
            plt.figure(figsize=(12, 8))
            plt.axhline(test_port_price.mean())
            plt.plot(test_port_price)
            plt.grid(True)
            plt.title('port_price')
            plt.show()

            buy_price = train_port_price.quantile(0.2)
            sell_price = train_port_price.quantile(0.8)
            position1 = np.where(test_port_price < buy_price, 1, np.nan)
            position2 = np.where(test_port_price > sell_price, -1, position1)
            position = pd.Series(position2, name='position')
            position.fillna(method='ffill', inplace=True)

            position.plot(ylim=[-1.1, 1.1], figsize=(12, 8))
            plt.title('position')
            plt.show()

            test_port_price = pd.Series(test_port_price, name='test_port_price')
            test_port_price.reset_index(inplace=True,drop=True)
            data_return = pd.concat([test_port_price, position], axis=1)
            data_return['price_diff'] = data_return['test_port_price'].diff()
            data_return['str_price'] = data_return['price_diff'] * data_return['position']
            price = data_return['str_price'].cumsum()

            return price



    def Byindustry(self):

        #得到行业内所有两个股票的组合
        indus_data = ts.get_stock_basics(self.end)
        indus_data.sort_values('industry',inplace=True)
        if self.industry not in indus_data:
            print('所输入行业不在行业列表内')
        else:
            data_used = indus_data[indus_data['industry']==self.industry]
            code_list = list(data_used.index)
            stock_comb = list(itertools.combinations(code_list,2))   #不建议3个以上，因为会出现组合过多的情况，效率太低

            #接下去计算每个组合的表现
            for comb in stock_comb:
                self.stockcode = [i for i in comb]      #将tuple变成list,同时赋予self.stockcode
                self.Bystockcode()                      #直接利用组合函数

            #这里缺什么呢？缺一个评判指标，怎么去判定哪个最好。现在的话只能一个个去目测。
            #为什么不写评判指标呢？因为股票融券一个很大的问题是，融资融券成本的计算，这个我不知道具体计算公式，因此没算
            #在不知道成本的情况下，我没法计算完整的收益曲线。因此不好判定。



if __name__ == '__main__':
    pair = Pair_Trading(stockcode=['600519','000858','000596'],start='2017-01-01',end='2020-01-01',ifsplit=True)
    pair_return = pair.Bystockcode()
    pair_return.plot(figsize=(12,8))
    plt.title('hold_price')
    plt.show()

