#当初拿到了一个bitcoin的高频数据
#主要验证卖一和买一之间压力变化和收益的影响

import pandas as pd
import numpy as np
from scipy.stats import pearsonr,spearmanr,kendalltau
import math
import itertools


'''
在实际操作中，我们只能知道当前时期之前的
因此需要做一个in-sample和out-of-sample的区分
'''


data = pd.read_csv('HUOBI_FUTURE_BTC_QUARTER.ob.20200505.csv',header=None)
commission_fee = 0   #自己设置
slippage = 0         #同样自己设置
start = None
end = None
freq = [10,50,100,200,500,1000,2000,5000,10000]
benchmark = None  #使用buy and hold策略去比较
capital_base = 0  #设置初始资金，因为不确定具体数额，我直接用0了
portfolio = {}    #用来存储仓位
corr_all_type = ['pearsonr','spearmanr','kendalltau']
consider_vol = True   #是否要成交量不同

#事先处理好data
def handle_data(data,n=0.5):       #n用来设置in-sample比例
    df = data.iloc[:, [1, 2, 4, 5, 6, 7]].copy()
    df.columns = ['exchange_time', 'server_time', 'sell_price_1', 'sell_vol_1', 'bid_price_1', 'bid_vol_1']
    # 构造信号：盘口压力=(盘口买一数量 - 盘口卖一数量)/(盘口买一数量 + 盘口卖一数量)
    # 由公式也可以知道，pressure列的值区间是（-1,1)，并且越接近1，买压越大。
    df['pressure'] = (df.bid_vol_1 - df.sell_vol_1) / (df.bid_vol_1 + df.sell_vol_1)
    df['mid_price'] = 0.5 * (df.bid_price_1 + df.sell_price_1)

    part_len = int(len(df) * n)
    in_sample_df = df.iloc[:part_len,:]               #不认为是面板数据，认为是时间序列，因此不打乱
    out_sample_df = df.iloc[part_len:,:]
    return in_sample_df,out_sample_df

in_sample_df, out_sample_df = handle_data(data)
# print(df.head(5))

def Evaluate_Return(Return):
    win_to_loss = (np.sign(Return) == 1).sum() / (np.sign(Return) == -1).sum()
    win_loss_ratio = win_to_loss/(1+win_to_loss)
    Ave_return = round(Return.mean(),4)
    Std_return = Return.std()
    Cum_return = Return.cumsum()   #这里因为考虑是单笔交易，且有时间间隔，所以直接加总不复利了。
    print('平均收益为%f，胜率为%f'%(Ave_return,win_loss_ratio))
    return Ave_return   #假设我们最关注这个数据，以此为策略评判好坏


class Vol_Strategy():
    def __init__(self):
        self.freq = freq
        self.df = in_sample_df
        self.test_df = out_sample_df
        # self.port = portfolio
        # self.money = capital_base
        self.commission_fee = commission_fee
        self.slippage = slippage
        self.index = 0                 #用来标注回测期的开始
        self.consider_vol = consider_vol

    def Evaluate_in_sample_df(self,corr_type='pearsonr'):    #用来设置想要的相关系数
        if corr_type not in corr_all_type:
            raise Exception('corr_type must be one of [\'pearsonr\',\'spearmanr\',\'kendalltau\']')

        if corr_type == 'pearsonr':
        #根据回测区间里相关性最大的值选出回测区间
            freq_record = self.freq[0]
            max_corr = 0
            for i in self.freq:
                freq_return = (self.df['mid_price'].shift(-i) / self.df['mid_price'] - 1) * 10000
                freq_return.dropna(inplace=True)
                pressure = self.df['pressure'][:-i]
                pearsonr_corr = pearsonr(freq_return, pressure)[0]
                if abs(pearsonr_corr) > abs(max_corr):
                    max_corr = pearsonr_corr
                    freq_record = i
            print('最佳信号间隔为{},{}相关系数为{}'.format(freq_record,corr_type,max_corr))

        #只是调整了下相关系数计算方法，其他都一样
        elif corr_type == 'spearmanr':
            freq_record = self.freq[0]
            max_corr = 0
            for i in self.freq:
                freq_return = (self.df['mid_price'].shift(-i) / self.df['mid_price'] - 1) * 10000
                freq_return.dropna(inplace=True)
                pressure = self.df['pressure'][:-i]
                spearmanr_corr = spearmanr(freq_return, pressure)[0]
                if abs(spearmanr_corr) > abs(max_corr):
                    max_corr = spearmanr_corr
                    freq_record = i
            print('最佳信号间隔为{},{}最大相关系数为{}'.format(freq_record,corr_type,max_corr))

        elif corr_type == 'kendalltau':
            freq_record = self.freq[0]
            max_corr = 0
            for i in self.freq:
                freq_return = (self.df['mid_price'].shift(-i) / self.df['mid_price'] - 1) * 10000
                freq_return.dropna(inplace=True)
                pressure = self.df['pressure'][:-i]
                kendalltau_corr = kendalltau(freq_return, pressure)[0]
                if abs(kendalltau_corr) > abs(max_corr):
                    max_corr = kendalltau_corr
                    freq_record = i
            print('最佳信号间隔为{},{}最大相关系数为{}'.format(freq_record, corr_type, max_corr))
        return freq_record,max_corr

    def Get_Test_df_Return(self,freq_record,max_corr,p_=0.9):
        # 在Evaluate_in_sample后，我们得到了最佳的freq_record，其对应一个最佳的max_corr
        # 我们以其构建一个最简单的策略，在pressure为正时买入，为负时卖出，持有期为freq_record
        freq_return = (self.test_df['mid_price'].shift(-freq_record) / self.test_df['mid_price'] - 1) * 10000
        if not self.consider_vol:       #如果不考虑手数，买的数量都一样
            if max_corr > 0:       #相关性为正考虑正向操作
                freq_return = freq_return * np.sign(self.test_df.pressure)
            elif max_corr < 0:
                freq_return = freq_return * np.sign(self.test_df.pressure) * -1

        if self.consider_vol:        #如果考虑手数，也就是说收益对应的分配比例不一样
            #以train_df里的分位数为标准，[0,0.25,0.5,0.75,1]之间四个系数分别定位 2 0 0 -2
            #这里的系数完全可以自己调整，只要sum（分位数*比例）=1即可
            #这里直接用p来计算，p要求大于等于0.5
            if p_<0.5:
                raise ValueError('p_ should be bigger than 0.5')

            p1 = self.df.pressure.quantile(p_)
            p2 = self.df.pressure.quantile(1-p_)
            ratio_1 = np.where(self.test_df.pressure>p1,0.5/(1-p_),0)
            ratio_2 = np.where(self.test_df.pressure<p2,-0.5/(1-p_),0)
            ratio = ratio_2 + ratio_1
            #因为两者不可能重复，所以可以这样子操作
            if max_corr > 0:
                freq_return = freq_return * ratio
            elif max_corr < 0:
                freq_return = freq_return * ratio * -1

        return freq_return



#尽量获取最优值

data_dict = {'corr':['pearsonr','spearmanr','kendalltau'],
             'p_':[0.5, 0.6, 0.7, 0.8, 0.9, 0.95]
             }

d = [n for n in itertools.product(data_dict['corr'],data_dict['p_'])]

if __name__ == '__main__':
    best_corr_type = ''
    best_p_ = None
    max_ave_return = -math.inf

    for item in d:
        corr_type = item[0]
        p_ = item[1]

        vol_stra = Vol_Strategy()
        freq_record, max_corr = vol_stra.Evaluate_in_sample_df(corr_type=corr_type)
        freq_return = vol_stra.Get_Test_df_Return(freq_record, max_corr,p_=p_)
        ave_return = Evaluate_Return(freq_return)

        if max_ave_return < ave_return:
            max_ave_return = ave_return
            best_corr_type = corr_type
            best_p_ = p_
    print('最好的相关系数为{},最好的p_为{},其平均收益为{}'.format(best_corr_type,best_p_,max_ave_return))


'''
总结下：
1.  之前没发现样本内外的问题，这次改进了下，发现样本外结果也还挺好的。  
2.  会发现随着p_的增大，胜率和平均收益都明显增大。但在0.9到0.95的时候有所反转。
3.  会发现压力值的大小其实是要定量的，因为越极端的值，其胜率越高。
    如果简单按照定性，大于0，小于0分配，收益和胜率都会下降。
4.  我这里算出来不同相关系数做出来结果基本一样，但实际理论上应该是不一样的
    理论上就应该用最基本的那个皮尔逊相关系数（也就是公式里面给的）
5.  最后按照p_分组并赋予权重的策略与mean+std基本有很大共通之处，改个判断点。
6.  跟上次的结果对比后，会发现时间窗口的结果不同，还有就是，分样本内外后，收益有所下降。
'''








'''
本来想写个交易函数的，但是想到期货交易的话，
因为本身是保证金交易，应该更注重每一笔的盈亏，
因此换一个方法写，就把交易函数都注释掉了，放到了最后，如果想启用这种方法那就再说
'''

    # def Strategy(self,freq_record,max_corr,consider_vol=False):
    #     # 在Evaluate_in_sample后，我们得到了最佳的freq_record，其对应一个最佳的max_corr
    #     # 我们以其构建一个最简单的策略，在pressure为正时买入，为负时卖出
    #     if consider_vol:       #如果不考虑手数，买的数量都一样，我们假设就是1手
    #         if max_corr > 0:   #相关性为正考虑正向操作
    #             if self.test_df['pressure'] > 0:
    #                 self.bid(1)
    #             elif self.test_df['pressure'] < 0:
    #                 self.sell(1)
    #             else:
    #                 self.remain()

    # #交易函数这里假定了中间价能成交，但实际上这个还是有点问题的，可能要考虑是否hit的问题
    # def bid(self,amount):
    #     #定义做多函数
    #     if self.index == 0:
    #         self.port[self.index] = amount
    #     else:
    #         self.port[self.index] = self.port[self.index-1] + amount
    #
    #     self.money = self.money - amount * self.test_df.mid_price[self.index] * (1 + self.commission_fee + self.slippage)
    #
    #
    # def sell(self,amount):
    #     #做空函数
    #     if self.index == 0:
    #         self.port[self.index] = amount
    #     else:
    #         self.port[self.index] = self.port[self.index-1] - amount
    #
    #     self.money = self.money + amount * self.test_df['mid_price'] * (1 + self.commission_fee + self.slippage)
    #
    # def remain(self):
    #     #啥都不动
    #     if self.index == 0:
    #         self.port[self.index] = 0
    #     else:
    #         self.port[self.index] = self.port[self.index-1]


